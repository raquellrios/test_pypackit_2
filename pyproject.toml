[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.0", "versioningit"]

[project]
authors = [
    {name = "RepoDynamics", email = "contact@repodynamics.com"},
]
classifiers = [
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = [
    "repodynamics >= 0.0.0.dev193",
]
description = "A fully automated, plug and play, professional software project management solution for Python packages on GitHub"
dynamic = [
    "version",
]
keywords = [
    "Project Management",
    "Software Development",
    "DevOps",
    "Continuous Integration",
    "Continuous Deployment",
    "Continuous Testing",
    "Automation",
    "Maintenance",
    "GitHub Actions",
    "Developer Experience",
    "Deployment Manager",
    "Release Automation",
    "Repository Template",
    "Dynamic Repository",
    "Infrastructure as Code",
    "Python",
    "Packaging",
    "Website",
    "Bot",
    "Config",
]
maintainers = [
    {name = "RepoDynamics", email = "contact@repodynamics.com"},
]
name = "pypackit"
readme = "src/readme_pypi.md"
requires-python = ">= 3.10"
license = {file = "LICENSE"}

[project.urls]
Documentation = "https://pypackit.repodynamics.com"
Download = "https://github.com/RepoDynamics/PyPackIT/releases"
Homepage = "https://pypackit.repodynamics.com"
Issue-Tracker = "https://github.com/RepoDynamics/PyPackIT/issues"
News = "https://pypackit.repodynamics.com/news"
Source = "https://github.com/RepoDynamics/PyPackIT"
Sponsor = "https://pypackit.repodynamics.com/contribute/collaborate/maintain/sponsor"

[tool]
[tool.bandit]
targets = ["src"]

[tool.black]
line-length = 100
required-version = "23.9.1"
target-version = ["py310", "py311", "py312"]
verbose = true

[tool.coverage]
[tool.coverage.html]
directory = ".local/report/coverage"

[tool.coverage.report]
exclude_also = ["def __repr__", "if self\\.debug", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "@(abc\\.)?abstractmethod"]
show_missing = true

[tool.coverage.run]
branch = true
data_file = ".local/cache/coverage/.coverage"
source_pkgs = ["pypackit"]

[tool.coverage.xml]
output = ".local/report/coverage/coverage.xml"

[tool.isort]
color_output = true
dedup_headings = true
filter_files = true
line_length = 100
lines_after_imports = 2
lines_before_imports = 2
lines_between_sections = 0
no_lines_before = ["future", "stdlib", "thirdparty", "firstparty", "localfolder"]
only_modified = true
overwrite_in_place = true
profile = "black"
skip_gitignore = true
src_paths = ["src", "tests"]
verbose = true

[tool.isort.import_headings]
firstparty = "Self"
future = "Futures"
stdlib = "Standard libraries"
thirdparty = "Non-standard libraries"

[tool.mypy]
any_exprs_report = ".local/report/mypy"
cache_dir = ".local/cache/mypy"
color_output = true
html_report = ".local/report/mypy"
linecount_report = ".local/report/mypy"
linecoverage_report = ".local/report/mypy"
lineprecision_report = ".local/report/mypy"
packages = ["pypackit"]
pretty = true
raise_exceptions = true
show_column_numbers = true
show_error_context = true
show_traceback = true
strict = true
txt_report = ".local/report/mypy"
verbosity = 2
warn_return_any = true

[tool.pylint]
[tool.pylint.basic]
good-names = ["i", "j", "k", "x", "y", "z", "ex", "Run", "_"]

[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 15
max-locals = 15
max-public-methods = 50
max-returns = 10
max-statements = 50
min-public-methods = 1

[tool.pylint.format]
max-line-length = 100
max-module-lines = 2000

[tool.pylint.imports]
ext-import-graph = ".local/report/pylint/import_graph_external.svg"
import-graph = ".local/report/pylint/import_graph_total.svg"
int-import-graph = ".local/report/pylint/import_graph_internal.svg"

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint.main]
fail-under = 10
jobs = 0
limit-inference-results = 500
load-plugins = ["pylint.extensions.broad_try_clause", "pylint.extensions.code_style", "pylint.extensions.comparison_placement", "pylint.extensions.confusing_elif", "pylint.extensions.for_any_all", "pylint.extensions.consider_refactoring_into_while_condition", "pylint.extensions.consider_ternary_expression", "pylint.extensions.bad_builtin", "pylint.extensions.mccabe", "pylint.extensions.dict_init_mutate", "pylint.extensions.docstyle", "pylint.extensions.dunder", "pylint.extensions.check_elif", "pylint.extensions.empty_comment", "pylint.extensions.eq_without_hash", "pylint.extensions.private_import", "pylint.extensions.magic_value", "pylint.extensions.redefined_variable_type", "pylint.extensions.no_self_use", "pylint.extensions.overlapping_exceptions", "pylint.extensions.docparams", "pylint.extensions.redefined_loop_name", "pylint.extensions.set_membership", "pylint.extensions.typing", "pylint.extensions.while_used"]
persistent = true
py-version = "3.10"
recursive = true
source-roots = ["src"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

[tool.pylint.reports]
msg-template = "{path}\nL[{line}:{end_line}] - Col[{column}:{end_column}] - Obj: {obj}\n\t{msg_id}: {category} - {symbol}\n\t{msg}\n"
output-format = ["json:.local/report/pylint/report_json.json", "text:.local/report/pylint/report_text.txt", "parseable:.local/report/pylint/report_parseable.txt", "msvs:.local/report/pylint/report_msvs.txt", "colorized"]
reports = true
score = true

[tool.pylint.similarities]
ignore-comments = true
min-similarity-lines = 8

[tool.pytest.ini_options]
addopts = "-r a --verbose --color=yes --full-trace --cov --cov-config=pyproject.toml --cov-report=term-missing:skip-covered --cov-report=html --cov-report=xml --strict-config --strict-markers"
cache_dir = ".local/cache/pytest"
console_output_style = "count"
log_auto_indent = true
log_cli = true
log_cli_format = "%(levelname)s %(message)s"
log_cli_level = "INFO"
log_file = ".local/report/pytest/log.txt"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s %(levelname)s %(message)s"
log_file_level = "DEBUG"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_level = "DEBUG"
minversion = "7.4.2"
python_classes = ["Test*", "*Test"]
python_files = ["test_*.py", "tests_*.py", "*_test.py", "*_tests.py"]
python_functions = ["test_*", "tests_*", "*_test", "*_tests"]
required_plugins = ["pytest-cov>=4.1.0,<5"]
testpaths = ["tests"]

[tool.ruff]
cache-dir = ".local/cache/ruff"
ignore = ["PLR1711"]
ignore-init-module-imports = true
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
line-length = 100
output-format = "grouped"
required-version = "0.1.5"
select = ["F", "E", "W", "N", "D", "UP", "YTT", "S", "BLE", "FBT", "B", "COM", "C4", "DTZ", "EM", "EXE", "ICN", "PIE", "PT", "RSE", "RET", "SIM", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL", "RUF"]
show-fixes = true
show-source = true
src = ["src", "tests"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.flake8-quotes]
docstring-quotes = "single"
multiline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"tests/src/**" = ["S101"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.pylint]
max-args = 10
max-public-methods = 50
max-returns = 10

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.versioningit]
[tool.versioningit.format]
dirty = "{base_version}+0.{committer_date:%Y.%m.%d}.{revision}.dirty"
distance = "{base_version}+{distance}.{committer_date:%Y.%m.%d}.{revision}"
distance-dirty = "{base_version}+{distance}.{committer_date:%Y.%m.%d}.{revision}.dirty"

[tool.versioningit.onbuild]
build-file = "pypackit/__init__.py"
method = "replace-version"
regex = "^\\s*__version_details__\\s*=\\s*(?P<version>.*)"
replacement = "dict(\n    version=\"{version}\",\n    version_tuple={version_tuple},\n    author_date=\"{author_date:%Y.%m.%d}\",\n    build_date=\"{build_date:%Y.%m.%d}\",\n    branch=\"{branch}\",\n    distance=\"{distance}\",\n    head_commit_hash=\"{revision}\",\n)"
require-match = true
source-file = "src/pypackit/__init__.py"

[tool.versioningit.tag2version]
rmprefix = "ver/"

[tool.versioningit.vcs]
default-tag = "ver/0.0.0"
match = ["ver/[0-9]*.[0-9]*.[0-9]*"]
method = "git"
